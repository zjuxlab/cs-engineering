"use strict";(self.webpackChunkcs_engineering=self.webpackChunkcs_engineering||[]).push([[9283],{2061:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var o=t(58168),r=(t(96540),t(15680));const a={title:"goroutine",slug:"goroutine",sidebar_position:0},i="goroutine",l={unversionedId:"\u8f6f\u4ef6\u5de5\u7a0b\u6280\u80fd\u6811/\u540e\u7aef\u6280\u672f/\u5f00\u53d1\u8bed\u8a00/Golang/\u5e76\u53d1\u5e76\u884c\u4ecb\u7ecd/goroutine/goroutine",id:"\u8f6f\u4ef6\u5de5\u7a0b\u6280\u80fd\u6811/\u540e\u7aef\u6280\u672f/\u5f00\u53d1\u8bed\u8a00/Golang/\u5e76\u53d1\u5e76\u884c\u4ecb\u7ecd/goroutine/goroutine",title:"goroutine",description:"Author:NA",source:"@site/docs/\u8f6f\u4ef6\u5de5\u7a0b\u6280\u80fd\u6811/\u540e\u7aef\u6280\u672f/\u5f00\u53d1\u8bed\u8a00/Golang/\u5e76\u53d1\u5e76\u884c\u4ecb\u7ecd/goroutine/goroutine.md",sourceDirName:"\u8f6f\u4ef6\u5de5\u7a0b\u6280\u80fd\u6811/\u540e\u7aef\u6280\u672f/\u5f00\u53d1\u8bed\u8a00/Golang/\u5e76\u53d1\u5e76\u884c\u4ecb\u7ecd/goroutine",slug:"/\u8f6f\u4ef6\u5de5\u7a0b\u6280\u80fd\u6811/\u540e\u7aef\u6280\u672f/\u5f00\u53d1\u8bed\u8a00/Golang/\u5e76\u53d1\u5e76\u884c\u4ecb\u7ecd/goroutine/goroutine",permalink:"/cs-engineering/\u8f6f\u4ef6\u5de5\u7a0b\u6280\u80fd\u6811/\u540e\u7aef\u6280\u672f/\u5f00\u53d1\u8bed\u8a00/Golang/\u5e76\u53d1\u5e76\u884c\u4ecb\u7ecd/goroutine/goroutine",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/\u8f6f\u4ef6\u5de5\u7a0b\u6280\u80fd\u6811/\u540e\u7aef\u6280\u672f/\u5f00\u53d1\u8bed\u8a00/Golang/\u5e76\u53d1\u5e76\u884c\u4ecb\u7ecd/goroutine/goroutine.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{title:"goroutine",slug:"goroutine",sidebar_position:0},sidebar:"sidebar",previous:{title:"\u5e76\u53d1\u5e76\u884c\u4ecb\u7ecd",permalink:"/cs-engineering/\u8f6f\u4ef6\u5de5\u7a0b\u6280\u80fd\u6811/\u540e\u7aef\u6280\u672f/\u5f00\u53d1\u8bed\u8a00/Golang/\u5e76\u53d1\u5e76\u884c\u4ecb\u7ecd/\u5e76\u53d1\u5e76\u884c\u4ecb\u7ecd"},next:{title:"channel",permalink:"/cs-engineering/\u8f6f\u4ef6\u5de5\u7a0b\u6280\u80fd\u6811/\u540e\u7aef\u6280\u672f/\u5f00\u53d1\u8bed\u8a00/Golang/\u5e76\u53d1\u5e76\u884c\u4ecb\u7ecd/channel/channel"}},s={},u=[{value:"\u5173\u952e\u6982\u5ff5",id:"\u5173\u952e\u6982\u5ff5",level:2},{value:"GM\u6a21\u578b\u548cGPM\u6a21\u578b",id:"gm\u6a21\u578b\u548cgpm\u6a21\u578b",level:2},{value:"GPM\u6a21\u578b",id:"gpm\u6a21\u578b",level:2},{value:"\u5de5\u4f5c\u7a83\u53d6\u7b97\u6cd5\u6982\u8ff0",id:"\u5de5\u4f5c\u7a83\u53d6\u7b97\u6cd5\u6982\u8ff0",level:2},{value:"Spinning\u7b97\u6cd5\u6982\u8ff0",id:"spinning\u7b97\u6cd5\u6982\u8ff0",level:2},{value:"Golang\u5185\u5b58\u6a21\u578b",id:"golang\u5185\u5b58\u6a21\u578b",level:2},{value:"\u521b\u5efaGoroutine",id:"\u521b\u5efagoroutine",level:2},{value:"\u963b\u585eGoroutine",id:"\u963b\u585egoroutine",level:2},{value:"\u5524\u9192Goroutine",id:"\u5524\u9192goroutine",level:2},{value:"\u8c03\u5ea6\u5668",id:"\u8c03\u5ea6\u5668",level:2},{value:"Overall",id:"overall",level:2},{value:"\u4e3b\u52a8\u8c03\u5ea6",id:"\u4e3b\u52a8\u8c03\u5ea6",level:3},{value:"P Find G",id:"p-find-g",level:3},{value:"Steal Work",id:"steal-work",level:3},{value:"Handoff",id:"handoff",level:3},{value:"\u62a2\u5360\u673a\u5236",id:"\u62a2\u5360\u673a\u5236",level:3}],g={toc:u},p="wrapper";function c(n){let{components:e,...a}=n;return(0,r.yg)(p,(0,o.A)({},g,a,{components:e,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"goroutine"},"goroutine"),(0,r.yg)("p",null,"Author:NA"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"\u53c2\u8003\u94fe\u63a5\uff1a\n",(0,r.yg)("a",{parentName:"p",href:"https://www.zhihu.com/question/20862617"},"https://www.zhihu.com/question/20862617"),"\n",(0,r.yg)("a",{parentName:"p",href:"https://studygolang.com/articles/33044"},"https://studygolang.com/articles/33044"),"\n",(0,r.yg)("a",{parentName:"p",href:"https://blog.csdn.net/weixin_51546892/article/details/123050231"},"https://blog.csdn.net/weixin_51546892/article/details/123050231"))),(0,r.yg)("h1",{id:"goroutine\u7684\u4f18\u70b9"},"Goroutine\u7684\u4f18\u70b9"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"\u8bf7\u4f60\u89e3\u91cagolang GMP\u8c03\u5ea6\u6a21\u578b\u7684\u4f18\u70b9")),(0,r.yg)("p",null,"Golang \u7684 GMP \u8c03\u5ea6\u6a21\u578b\u5177\u6709\u4ee5\u4e0b\u4f18\u70b9\uff1a"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("b",null,"\u9ad8\u6548\u7684\u534f\u7a0b\u7ba1\u7406"),"\uff1a - GMP \u6a21\u578b\u5c06 Go \u7a0b\u5e8f\u4e2d\u7684\u5e76\u53d1\u4efb\u52a1\u62bd\u8c61\u4e3a\u534f\u7a0b\uff08goroutine\uff09\uff0c\u534f\u7a0b\u76f8\u6bd4\u4e8e\u4f20\u7edf\u7ebf\u7a0b\u5177\u6709\u66f4\u5c0f\u7684\u5185\u5b58\u5360\u7528\u548c\u521b\u5efa\u9500\u6bc1\u6210\u672c\u3002\u901a\u8fc7 GMP \u6a21\u578b\uff0cGo \u53ef\u4ee5\u9ad8\u6548\u5730\u7ba1\u7406\u548c\u8c03\u5ea6\u6570\u4ee5\u767e\u4e07\u8ba1\u7684\u534f\u7a0b\uff0c\u4f7f\u5f97\u5e76\u53d1\u7f16\u7a0b\u53d8\u5f97\u66f4\u52a0\u8f7b\u91cf\u548c\u9ad8\u6548\u3002"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("b",null,"\u5168\u5c40\u8fd0\u884c\u961f\u5217\u548c\u672c\u5730\u8fd0\u884c\u961f\u5217"),"\uff1a - M\uff08Machine\uff09\u548c P\uff08Processor\uff09\u4e2d\u7684\u8c03\u5ea6\u5668\u62e5\u6709\u81ea\u5df1\u7684\u672c\u5730\u8fd0\u884c\u961f\u5217\uff0c\u540c\u65f6\u8fd8\u5b58\u5728\u4e00\u4e2a\u5168\u5c40\u8fd0\u884c\u961f\u5217\u3002\u8fd9\u79cd\u53cc\u91cd\u961f\u5217\u673a\u5236\u5141\u8bb8\u4efb\u52a1\u5728\u591a\u4e2a\u961f\u5217\u4e4b\u95f4\u9ad8\u6548\u5730\u5206\u914d\u548c\u8fc1\u79fb\uff0c\u63d0\u9ad8\u4e86\u8c03\u5ea6\u7684\u7075\u6d3b\u6027\u548c\u4efb\u52a1\u5206\u914d\u7684\u5e73\u8861\u6027\u3002"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("b",null,"\u5de5\u4f5c\u7a83\u53d6\u673a\u5236"),"\uff1a - \u4e3a\u4e86\u907f\u514d\u67d0\u4e9b\u5904\u7406\u5668\uff08P\uff09\u957f\u65f6\u95f4\u7a7a\u95f2\uff0cGolang \u7684 GMP \u8c03\u5ea6\u6a21\u578b\u91c7\u7528\u4e86\u5de5\u4f5c\u7a83\u53d6\u673a\u5236\u3002\u7a7a\u95f2\u7684\u5904\u7406\u5668\u53ef\u4ee5\u4ece\u5176\u4ed6\u5fd9\u788c\u7684\u5904\u7406\u5668\u7a83\u53d6\u4efb\u52a1\uff0c\u8fd9\u6837\u53ef\u4ee5\u63d0\u9ad8\u7cfb\u7edf\u7684\u6574\u4f53\u5229\u7528\u7387\u548c\u4efb\u52a1\u6267\u884c\u7684\u5e76\u884c\u5ea6\uff0c\u51cf\u5c11\u56e0\u4efb\u52a1\u4e0d\u5747\u5300\u5206\u5e03\u800c\u5bfc\u81f4\u7684\u8d44\u6e90\u6d6a\u8d39\u3002"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("b",null,"\u8c03\u5ea6\u5668\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u7ebf\u7a0b\u5206\u79bb"),"\uff1a - \u5728 GMP \u6a21\u578b\u4e2d\uff0cG\uff08Goroutine\uff09\u662f\u7528\u6237\u7ea7\u7684\u534f\u7a0b\uff0cP\uff08Processor\uff09\u8868\u793a\u8c03\u5ea6\u5668\uff0cM\uff08Machine\uff09\u662f\u5b9e\u9645\u64cd\u4f5c\u7cfb\u7edf\u7ebf\u7a0b\u3002GMP \u6a21\u578b\u5c06\u534f\u7a0b\u8c03\u5ea6\u548c\u7cfb\u7edf\u7ebf\u7a0b\u89e3\u8026\uff0c\u4f7f\u5f97 Go \u53ef\u4ee5\u5728\u4e0d\u76f4\u63a5\u4f9d\u8d56\u64cd\u4f5c\u7cfb\u7edf\u7ebf\u7a0b\u7684\u60c5\u51b5\u4e0b\uff0c\u9ad8\u6548\u5730\u7ba1\u7406\u548c\u8c03\u5ea6\u5927\u91cf\u7684\u5e76\u53d1\u4efb\u52a1\u3002"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("b",null,"\u81ea\u9002\u5e94\u8c03\u5ea6"),"\uff1a - Golang \u7684 GMP \u8c03\u5ea6\u5668\u80fd\u591f\u6839\u636e\u7cfb\u7edf\u8d1f\u8f7d\u548c\u534f\u7a0b\u6267\u884c\u60c5\u51b5\uff0c\u52a8\u6001\u8c03\u6574\u8c03\u5ea6\u7b56\u7565\u3002\u8fd9\u79cd\u81ea\u9002\u5e94\u6027\u4f7f\u5f97 Golang \u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u8fd0\u884c\u73af\u5883\u548c\u8d1f\u8f7d\u4e0b\uff0c\u59cb\u7ec8\u4fdd\u6301\u8f83\u9ad8\u7684\u6027\u80fd\u548c\u8d44\u6e90\u5229\u7528\u7387\u3002"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("b",null,"\u907f\u514d\u6b7b\u9501\u548c\u8d44\u6e90\u7ade\u4e89"),"\uff1a - \u901a\u8fc7\u5bf9\u5168\u5c40\u8d44\u6e90\u7684\u5408\u7406\u5206\u914d\u548c\u8c03\u5ea6\uff0cGMP \u6a21\u578b\u53ef\u4ee5\u6709\u6548\u907f\u514d\u4f20\u7edf\u591a\u7ebf\u7a0b\u7f16\u7a0b\u4e2d\u5e38\u89c1\u7684\u6b7b\u9501\u548c\u8d44\u6e90\u7ade\u4e89\u95ee\u9898\u3002\u6bcf\u4e2a\u534f\u7a0b\u90fd\u7531\u8c03\u5ea6\u5668\u63a7\u5236\uff0c\u4e0d\u4f1a\u56e0\u8d44\u6e90\u4e89\u593a\u800c\u5bfc\u81f4\u7cfb\u7edf\u7684\u4e0d\u53ef\u9884\u671f\u884c\u4e3a\u3002"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("b",null,"\u53ef\u6269\u5c55\u6027\u548c\u53ef\u7ef4\u62a4\u6027"),"\uff1a - GMP \u6a21\u578b\u8bbe\u8ba1\u7b80\u6d01\uff0c\u6269\u5c55\u6027\u5f3a\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u65b9\u4fbf\u5730\u7406\u89e3\u548c\u4f7f\u7528\u3002\u540c\u65f6\uff0cGolang \u7684\u8c03\u5ea6\u5668\u5b9e\u73b0\u4e86\u81ea\u52a8\u8c03\u4f18\u548c\u8d1f\u8f7d\u5747\u8861\uff0c\u4f7f\u5f97\u7a0b\u5e8f\u7684\u53ef\u7ef4\u62a4\u6027\u5927\u5927\u63d0\u9ad8\u3002")),(0,r.yg)("p",null,"\u7efc\u4e0a\u6240\u8ff0\uff0cGolang \u7684 GMP \u8c03\u5ea6\u6a21\u578b\u901a\u8fc7\u9ad8\u6548\u7684\u534f\u7a0b\u7ba1\u7406\u3001\u7075\u6d3b\u7684\u4efb\u52a1\u5206\u914d\u548c\u81ea\u9002\u5e94\u7684\u8c03\u5ea6\u7b56\u7565\uff0c\u5b9e\u73b0\u4e86\u9ad8\u6027\u80fd\u5e76\u53d1\u7f16\u7a0b\uff0c\u540c\u65f6\u4fdd\u6301\u4e86\u7cfb\u7edf\u7684\u53ef\u6269\u5c55\u6027\u548c\u6613\u7ef4\u62a4\u6027\u3002\u8fd9\u4e9b\u4f18\u70b9\u4f7f\u5f97 Golang \u5728\u6784\u5efa\u9ad8\u5e76\u53d1\u3001\u9ad8\u6027\u80fd\u7684\u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c\u5177\u6709\u660e\u663e\u7684\u4f18\u52bf\u3002"),(0,r.yg)("hr",null),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"\u4e3a\u4ec0\u4e48Goroutine\u5360\u7528\u6bd4\u4e00\u822c\u7ebf\u7a0b\u5c0f\uff1f")),(0,r.yg)("p",null,"Goroutine \u76f8\u6bd4\u4e8e\u4e00\u822c\u7ebf\u7a0b\u5360\u7528\u66f4\u5c0f\u7684\u539f\u56e0\u53ef\u4ee5\u5f52\u7ed3\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u65b9\u9762\uff1a"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("b",null,"\u6808\u5185\u5b58\u5360\u7528\u66f4\u5c0f"),"\uff1a - ",(0,r.yg)("b",null,"\u521d\u59cb\u6808\u7a7a\u95f4"),"\uff1aGoroutine \u7684\u521d\u59cb\u6808\u5927\u5c0f\u4ec5\u4e3a\u51e0 KB\uff08\u901a\u5e38\u662f 2 KB\uff09\uff0c\u800c\u4f20\u7edf\u7ebf\u7a0b\u7684\u521d\u59cb\u6808\u5927\u5c0f\u901a\u5e38\u4e3a\u51e0 MB\u3002Goroutine \u7684\u6808\u662f\u52a8\u6001\u589e\u957f\u7684\uff0c\u53ea\u6709\u5728\u9700\u8981\u65f6\u624d\u4f1a\u5206\u914d\u66f4\u591a\u7684\u6808\u7a7a\u95f4\u3002 - ",(0,r.yg)("b",null,"\u52a8\u6001\u589e\u957f"),"\uff1aGoroutine \u7684\u6808\u662f\u52a8\u6001\u6269\u5c55\u7684\uff0c\u53ea\u6709\u5728\u6808\u7a7a\u95f4\u4e0d\u591f\u7528\u65f6\u624d\u4f1a\u589e\u52a0\uff0c\u8fd9\u4e0e\u4f20\u7edf\u7ebf\u7a0b\u9884\u5148\u5206\u914d\u56fa\u5b9a\u5927\u5757\u5185\u5b58\u7684\u505a\u6cd5\u4e0d\u540c\u3002\u8fd9\u6837\u53ef\u4ee5\u6709\u6548\u5730\u51cf\u5c11\u5185\u5b58\u5360\u7528\u3002"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("b",null,"\u7528\u6237\u6001\u5b9e\u73b0"),"\uff1a - Goroutine \u7684\u8c03\u5ea6\u662f\u5728\u7528\u6237\u6001\u5b8c\u6210\u7684\uff0c\u4e0d\u9700\u8981\u9891\u7e41\u7684\u5185\u6838\u6001\u5207\u6362\u3002\u4f20\u7edf\u7ebf\u7a0b\u7684\u8c03\u5ea6\u7531\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u8d1f\u8d23\uff0c\u9700\u8981\u8fdb\u884c\u7528\u6237\u6001\u548c\u5185\u6838\u6001\u7684\u5207\u6362\uff0c\u8fd9\u4e9b\u5207\u6362\u64cd\u4f5c\u4e0d\u4ec5\u589e\u52a0\u4e86\u5f00\u9500\uff0c\u8fd8\u9700\u8981\u989d\u5916\u7684\u5185\u6838\u6570\u636e\u7ed3\u6784\u652f\u6301\uff08\u5982\u7ebf\u7a0b\u63a7\u5236\u5757\uff09\uff0c\u4ece\u800c\u589e\u52a0\u4e86\u5185\u5b58\u5360\u7528\u3002"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("b",null,"\u8f7b\u91cf\u7ea7\u4e0a\u4e0b\u6587\u5207\u6362"),"\uff1a - Goroutine \u7684\u4e0a\u4e0b\u6587\u5207\u6362\u7531 Go \u8fd0\u884c\u65f6\u8d1f\u8d23\uff0c\u6240\u9700\u4fdd\u5b58\u548c\u6062\u590d\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\u975e\u5e38\u5c11\uff08\u5982\u7a0b\u5e8f\u8ba1\u6570\u5668\u548c\u5c11\u91cf\u5bc4\u5b58\u5668\uff09\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u4f20\u7edf\u7ebf\u7a0b\u7684\u4e0a\u4e0b\u6587\u5207\u6362\u9700\u8981\u4fdd\u5b58\u66f4\u591a\u7684\u72b6\u6001\u4fe1\u606f\uff08\u5982 CPU \u5bc4\u5b58\u5668\u3001\u6808\u6307\u9488\u7b49\uff09\uff0c\u8fd9\u4e0d\u4ec5\u589e\u52a0\u4e86\u5207\u6362\u5f00\u9500\uff0c\u8fd8\u9700\u8981\u66f4\u591a\u7684\u5185\u5b58\u7a7a\u95f4\u3002"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("b",null,"\u8fd0\u884c\u65f6\u8c03\u5ea6\u5668\u4f18\u5316"),"\uff1a - Go \u8bed\u8a00\u7684\u8c03\u5ea6\u5668\u5bf9 Goroutine \u8fdb\u884c\u4e86\u4f18\u5316\uff0c\u53ef\u4ee5\u9ad8\u6548\u5730\u7ba1\u7406\u6210\u5343\u4e0a\u4e07\u7684 Goroutine\u3002\u7531\u4e8e Goroutine \u662f\u7531 Go \u8fd0\u884c\u65f6\u8c03\u5ea6\u800c\u4e0d\u662f\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u8c03\u5ea6\uff0cGo \u8fd0\u884c\u65f6\u53ef\u4ee5\u4f7f\u7528\u66f4\u8f7b\u91cf\u7684\u8c03\u5ea6\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u6765\u7ba1\u7406 Goroutine\uff0c\u4ece\u800c\u51cf\u5c11\u5185\u5b58\u548c CPU \u7684\u5360\u7528\u3002"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("b",null,"\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u5185\u5b58\u5206\u914d"),"\uff1a - \u4f20\u7edf\u7ebf\u7a0b\u901a\u5e38\u4f1a\u4e3a\u6bcf\u4e2a\u7ebf\u7a0b\u5206\u914d\u72ec\u7acb\u7684\u7ebf\u7a0b\u5c40\u90e8\u5b58\u50a8\uff08TLS\uff09\uff0c\u800c Goroutine \u4e0d\u9700\u8981\u8fd9\u79cd\u72ec\u7acb\u7684\u5b58\u50a8\u7ed3\u6784\u3002Go \u8fd0\u884c\u65f6\u901a\u8fc7\u667a\u80fd\u7684\u5185\u5b58\u7ba1\u7406\u7b56\u7565\uff0c\u907f\u514d\u4e86\u8bb8\u591a\u4e0d\u5fc5\u8981\u7684\u5185\u5b58\u5206\u914d\uff0c\u4ece\u800c\u8fdb\u4e00\u6b65\u964d\u4f4e\u4e86 Goroutine \u7684\u5185\u5b58\u5360\u7528\u3002")),(0,r.yg)("p",null,"\u603b\u7684\u6765\u8bf4\uff0cGoroutine \u76f8\u6bd4\u4e8e\u4f20\u7edf\u7ebf\u7a0b\u5360\u7528\u66f4\u5c0f\u7684\u539f\u56e0\u5728\u4e8e\u5176\u521d\u59cb\u6808\u7a7a\u95f4\u5c0f\u3001\u6808\u5185\u5b58\u52a8\u6001\u589e\u957f\u3001\u7528\u6237\u6001\u5b9e\u73b0\u7684\u9ad8\u6548\u8c03\u5ea6\u673a\u5236\u3001\u8f7b\u91cf\u7ea7\u7684\u4e0a\u4e0b\u6587\u5207\u6362\u4ee5\u53ca\u4f18\u5316\u7684\u8fd0\u884c\u65f6\u8c03\u5ea6\u5668\u8bbe\u8ba1\u3002\u8fd9\u4e9b\u7279\u70b9\u4f7f\u5f97 Goroutine \u80fd\u591f\u9ad8\u6548\u5730\u652f\u6301\u5927\u91cf\u5e76\u53d1\u4efb\u52a1\uff0c\u800c\u4e0d\u4f1a\u5e26\u6765\u4f20\u7edf\u7ebf\u7a0b\u6240\u9700\u7684\u9ad8\u989d\u5185\u5b58\u548c\u7cfb\u7edf\u5f00\u9500\u3002"),(0,r.yg)("h1",{id:"goroutine\u7684\u8c03\u5ea6\u6a21\u578b"},"Goroutine\u7684\u8c03\u5ea6\u6a21\u578b"),(0,r.yg)("h2",{id:"\u5173\u952e\u6982\u5ff5"},"\u5173\u952e\u6982\u5ff5"),(0,r.yg)("p",null,"\u5728Golang\u7a0b\u5e8f\u7684\u8c03\u5ea6\u4e2d\uff0c\u6709\u5982\u4e0b\u4e09\u4e2a\u5173\u952e\u7ed3\u6784"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"M\uff1aMethod\uff0c\u7cfb\u7edf\u7ebf\u7a0b")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"P\uff1aProcessor / Context\uff0cGoroutine\u8fd0\u884c\u4e0a\u4e0b\u6587"),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"\u4e00\u4e2a P \u5bf9\u5e94\u4e00\u4e2a\u201c\u6fc0\u6d3b\u201d\u7684 Goroutine"),(0,r.yg)("li",{parentName:"ul"},"\u53ef\u4ee5\u901a\u8fc7 ",(0,r.yg)("inlineCode",{parentName:"li"},"runtime.GOMAXPROCS(int)")," \u8bbe\u5b9aP\u7684\u6570\u91cf\uff1b\u6570\u91cf\u9ed8\u8ba4\u4e3aCPU\u6838\u6570"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"G\uff1a\u6bcf\u4e2aGoroutine\u534f\u7a0b"))),(0,r.yg)("hr",null),(0,r.yg)("p",null,"\u6b64\u5916\uff0c\u8fd8\u6709\u5982\u4e0b\u4e13\u7528\u8bcd\u6c47"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"spinning\uff1a\u81ea\u65cb\u6001\uff1b\u6ca1\u6709\u5728\u6267\u884c\u4efb\u4f55\u4efb\u52a1\u7684 M \u79f0\u4e3a spinning"),(0,r.yg)("li",{parentName:"ul"},"park\uff1a\u7761\u7720\uff1b\u8ba9\u4e00\u4e2aM\u8fdb\u5165\u7b49\u5f85\u72b6\u6001"),(0,r.yg)("li",{parentName:"ul"},"unpark\uff1a\u5524\u9192\uff1b\u8ba9\u4e00\u4e2aM\u4ece\u7b49\u5f85\u4e2d\u6062\u590d\u8fd0\u884c"),(0,r.yg)("li",{parentName:"ul"},"steal work\uff1a\u5de5\u4f5c\u7a83\u53d6\uff1b\u5728M\u7684\u7a7a\u95f2\u65f6\uff0c\u4ece\u5176\u4ed6M\u8fc1\u79fb\u4e00\u90e8\u5206G\u5230\u81ea\u5df1\u624b\u91cc\u8fd0\u884c"),(0,r.yg)("li",{parentName:"ul"},"blocked\uff1a\u963b\u585e\uff1b\u7ebf\u7a0b\u56e0\u4e3a\u7b49\u5f85\u7cfb\u7edf\u8c03\u7528\u800c\u6682\u505c\u8fd0\u884c")),(0,r.yg)("h2",{id:"gm\u6a21\u578b\u548cgpm\u6a21\u578b"},"GM\u6a21\u578b\u548cGPM\u6a21\u578b"),(0,r.yg)("p",null,(0,r.yg)("img",{src:t(43354).A,width:"1898",height:"1256"})),(0,r.yg)("h2",{id:"gpm\u6a21\u578b"},"GPM\u6a21\u578b"),(0,r.yg)("p",null,"\u4e00\u4e2aM\u53ef\u4ee5\u5305\u542b\u591a\u4e2aP\uff0c\u6bcf\u4e2aP\u5305\u542b\u591a\u4e2aG\uff0c\u5176\u4e2d\u4e00\u4e2a\u6fc0\u6d3b\u8fd0\u884c\uff0c\u5176\u4ed6\u5c31\u7eea\u7b49\u5f85"),(0,r.yg)("h2",{id:"\u5de5\u4f5c\u7a83\u53d6\u7b97\u6cd5\u6982\u8ff0"},"\u5de5\u4f5c\u7a83\u53d6\u7b97\u6cd5\u6982\u8ff0"),(0,r.yg)("p",null,(0,r.yg)("img",{src:t(33464).A,width:"1854",height:"904"})),(0,r.yg)("h2",{id:"spinning\u7b97\u6cd5\u6982\u8ff0"},"Spinning\u7b97\u6cd5\u6982\u8ff0"),(0,r.yg)("p",null,"\u6bcf\u5f53\u65b0\u4efb\u52a1\u88ab\u521b\u5efa \u6216\u8005 m\u88ab\u963b\u585e \u6216\u8005 m\u4ecespinning\u72b6\u6001\u9000\u51fa\u65f6\uff0c\u5982\u679c\u6709\u7a7a\u95f2\u7684P\uff0c\u5219\u786e\u4fdd\u81f3\u5c11\u8fd8\u6709\u4e00\u4e2aspinning\u72b6\u6001\u7684m\u3002\u56e0\u4e3a\u53ea\u6709\u5728\u6ca1\u6709spinning\u7684m\u65f6\u624d\u5524\u9192m\u6765spinning\uff0c\u800c\u4e0d\u662f\u521b\u5efa\u4e86\u65b0\u4efb\u52a1\u5c31\u5524\u9192m\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5c3d\u91cf\u51cf\u5c11park/unpark\u64cd\u4f5c\uff0c\u540c\u65f6\u8fd9\u4e2aspinning\u7684m\u4f1a\u53bb\u5077\u53d6\u90a3\u4e9b\u5fd9\u4e8e\u5de5\u4f5c\u4e2d\u7684m\u7684g\u548c\u6216\u8005\u963b\u585e\u4e2d\u7684m\u7684p\u6765\u8fd0\u884c\uff0c\u786e\u4fdd\u4e0a\u9762\u63d0\u5230\u7684\u4e24\u79cd\u60c5\u51b5\u53ca\u65f6\u88ab\u5904\u7406\u3002"),(0,r.yg)("h2",{id:"golang\u5185\u5b58\u6a21\u578b"},"Golang\u5185\u5b58\u6a21\u578b"),(0,r.yg)("p",null,(0,r.yg)("img",{src:t(37950).A,width:"1738",height:"644"})),(0,r.yg)("p",null,(0,r.yg)("img",{src:t(5910).A,width:"1736",height:"1208"})),(0,r.yg)("h1",{id:"\u8bfb\u4ee3\u7801"},"\u8bfb\u4ee3\u7801\uff01"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u5b9e\u73b0\u4ee3\u7801\u5728 ",(0,r.yg)("inlineCode",{parentName:"p"},"$GOROOT/src/runtime/proc.go")),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"\u4ee5",(0,r.yg)("inlineCode",{parentName:"li"},"go==1.19 Installed By MacOS homebrew"),"\u4e3a\u4f8b"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u4e3a\u4e86\u7b80\u8981\u8bf4\u660e\u8fd0\u884c\u6d41\u7a0b\uff0c\u4ee3\u7801\u6709\u5220\u6539"))),(0,r.yg)("h2",{id:"\u521b\u5efagoroutine"},"\u521b\u5efaGoroutine"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go"},"// LINE 4086\n\n// Create a new g running fn.\n// Put it on the queue of g's waiting to run.\n// `go func()` => `runtime.newproc(func)`\nfunc newproc(fn *funcval) {\n    systemstack(func() {\n        newg := newproc1(fn, current_G, caller_PC)\n\n        // runqput tries to put g on the local runnable queue.\n        // If next is false, runqput adds g to the tail of the runnable queue.\n        // If next is true, runqput puts g in the _p_.runnext slot.\n        // If the run queue is full, runnext puts g on the global queue.\n        // Executed only by the owner P.\n        runqput(current_P, newg, runnext=true)\n\n        if mainStarted {\n            // Tries to add one more P to execute G's.\n            // @see \"## Spinning\u7b97\u6cd5\u6982\u8ff0\"\n            wakep()\n        }\n    })\n}\n\n// Create a new g in state _Grunnable, starting at fn. callerpc is the\n// address of the go statement that created this. The caller is responsible\n// for adding the new g to the scheduler.\nfunc newproc1(fn *funcval, callergp *g, callerpc uintptr) *g {\n    _g_ := getg()\n\n    // add semaphone on `m` to disable preemption\n    acquirem() \n\n    _p_ := getg()\n\n    // Get unused *g mem block from gfree list.\n    // If local list is empty, grab a batch from global list.\n    // returns nullptr if not found\n    newg := gfget(_p_)\n\n    if newg == nil {\n        newg = allocg(_StackMin)\n        newg.status = _Gdead\n        allgs.add(newg) // publishes with a g->status of Gdead so GC scanner doesn't look at uninitialized stack.\n    }\n\n    // extra space in case of reads slightly beyond frame\n    // ??? why ???\n    totalSize := 4*goarch.PtrSize + sys.MinFrameSize\n    sp := newg.stack.hi - totalSize\n\n    initg(newg, with={sp, callerpc, callergp, fn})\n    init_profiling_if_needed(newg)\n    init_tracking_if_needed(newg) // set: whether we're tracking this G for sched latency statistics\n    newg.status = _Grunnable\n    init_gc(_p_, totalSize)\n    newg.goid = next_goid(_p_)\n    \n    releasem(_g_.m)\n\n    return newg\n}\n")),(0,r.yg)("h2",{id:"\u963b\u585egoroutine"},"\u963b\u585eGoroutine"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go"},"// LINE 346\n// Puts the current goroutine into a waiting state and calls unlockf on the\n// system stack.\n// If unlockf returns `false`, the goroutine is resumed; `true` for another schedule().\n// Reason explains why the goroutine has been parked. \nfunc gopark(unlockf func(*g, unsafe.Pointer) bool, lock unsafe.Pointer, reason waitReason) {\n        mp := acquirem()\n        gp := mp.curg\n        mp.waitlock = lock\n        mp.waitunlockf = unlockf\n        gp.waitreason = reason\n        releasem(mp)\n\n        // func mcall(fn func(*g))\n        // mcall switches from the g to the g0 stack and invokes fn(g)\n        // written by native asm\n        mcall(park_m)\n}\n\n\n// LINE 3333\n// park continuation on g0.\nfunc park_m(gp *g) {\n        _g_ := getg()\n\n        gp.status = _Gwaiting\n\n        // drop connection bwtween g and m\n        dropg()\n\n        if fn := _g_.m.waitunlockf; fn != nil {\n                ok := fn(gp, _g_.m.waitlock)\n                _g_.m.waitunlockf = nil\n                _g_.m.waitlock = nil\n                if !ok {\n                        gp.status = _Grunnable\n                        // Schedules gp to run on the current M.\n                        execute(gp, true) // Schedule it back, never returns.\n                }\n        }\n        schedule()\n}\n\n// dropg removes the association between m and the current goroutine m->curg (gp for short).\n// Typically a caller sets gp's status away from Grunning and then\n// immediately calls dropg to finish the job. The caller is also responsible\n// for arranging that gp will be restarted using ready at an\n// appropriate time. After calling dropg and arranging for gp to be\n// readied later, the caller can do other work but eventually should\n// call schedule to restart the scheduling of goroutines on this m.\nfunc dropg() {\n        _g_ := getg()\n\n        setMNoWB(&_g_.m.curg.m, nil)\n        setGNoWB(&_g_.m.curg, nil)\n}\n")),(0,r.yg)("h2",{id:"\u5524\u9192goroutine"},"\u5524\u9192Goroutine"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go"},"// LINE 372\nfunc goready(gp *g, traceskip int) {\n        systemstack(func() {\n                ready(gp, traceskip, true)\n        })\n}\n\n// LINE 843\n// Mark gp ready to run.\nfunc ready(gp *g, traceskip int, next bool) {\n        status := readgstatus(gp)\n\n        // Mark runnable.\n        _g_ := getg()\n        mp := acquirem() // disable preemption because it can be holding p in a local var\n        gp.status = _Grunnable\n        runqput(_g_.m.p.ptr(), gp, next)\n        wakep() // try to run a new P \n        releasem(mp)\n}\n")),(0,r.yg)("h2",{id:"\u8c03\u5ea6\u5668"},"\u8c03\u5ea6\u5668"),(0,r.yg)("h2",{id:"overall"},"Overall"),(0,r.yg)("p",null,"\u3010\u8c03\u5ea6\u5668\u7b56\u7565\u3011"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"workd stealing \u673a\u5236\uff1a\u5f53\u524d M \u6ca1\u6709 G\uff0c\u5c1d\u8bd5\u53bb\u5176\u4ed6 M \u7ed1\u5b9a P \u4e2d\u5077\u53d6 G"),(0,r.yg)("li",{parentName:"ul"},"hand off \u673a\u5236\uff1a\u5f53\u524d M \u56e0 G \u8fdb\u884c\u7cfb\u7edf\u8c03\u7528\u963b\u585e\u65f6\uff0cM \u91ca\u653e P\uff0c\u628a\u53bb\u8f6c\u79fb\u5230\u5176\u4ed6\u7a7a\u95f2\u7ebf\u7a0b\u6267\u884c"),(0,r.yg)("li",{parentName:"ul"},"\u62a2\u5360\u673a\u5236\uff1a\u5728coroutine\u4e2d\u8981\u7b49\u5f85\u4e00\u4e2a\u534f\u7a0b\u4e3b\u52a8\u8ba9\u51faCPU\u624d\u6267\u884c\u4e0b\u4e00\u4e2a\u534f\u7a0b\uff0c\u5728Go\u4e2d\uff0c\u4e00\u4e2agoroutine\u6700\u591a\u5360\u7528CPU10ms\uff0c\u9632\u6b62\u5176\u4ed6goroutine\u88ab\u997f\u6b7b"),(0,r.yg)("li",{parentName:"ul"},"\u5168\u5c40runq\uff1aM \u53ef\u4ee5\u4ece\u5168\u5c40 G \u961f\u5217\u83b7 G")),(0,r.yg)("h3",{id:"\u4e3b\u52a8\u8c03\u5ea6"},"\u4e3b\u52a8\u8c03\u5ea6"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go"},"// LINE 316\n// To abandon RUNNING status of current G\nfunc Gosched() {\n        checkTimeouts()\n        mcall(goschedImpl)\n}\n\n// LINE 3358\n// gp is the caller Goroutine\nfunc goschedImpl(gp *g) {\n        status := readgstatus(gp)\n\n        gp.status = _Grunnable\n        dropg()\n        lock(&sched.lock)\n        globrunqput(gp)\n        unlock(&sched.lock)\n\n        schedule()\n}\n\n\n// LINE 3177\n// One round of scheduler: find a runnable goroutine and execute it.\n// Never returns.\nfunc schedule() {\n        _g_ := getg()\n\n        // TODO: understand locked g on m\n        if _g_.m.lockedg != 0 {\n                stoplockedm()\n                execute(_g_.m.lockedg.ptr(), false) // Never returns.\n        }\n\nretry:\n        pp := _g_.m.p.ptr()\n        pp.preempt = false\n\n        gp, inheritTime, tryWakeP := findRunnable() // blocks until work is available\n\n        // This thread is going to run a goroutine and is not spinning anymore,\n        // so if it was marked as spinning we need to reset it now and potentially\n        // start a new spinning M.\n        if _g_.m.spinning {\n                resetspinning()\n        }\n\n        // TODO: understand sched.disable\n        if sched.disable.user && !schedEnabled(gp) {\n                // Scheduling of this goroutine is disabled. Put it on\n                // the list of pending runnable goroutines for when we\n                // re-enable user scheduling and look again.\n                lock(&sched.lock)\n                if schedEnabled(gp) {\n                        // Something re-enabled scheduling while we\n                        // were acquiring the lock.\n                        unlock(&sched.lock)\n                } else {\n                        sched.disable.runnable.pushBack(gp)\n                        sched.disable.n++\n                        unlock(&sched.lock)\n                        goto retry\n                }\n        }\n\n        // If about to schedule a not-normal goroutine (a GCworker or tracereader),\n        // wake a P if there is one.\n        if tryWakeP {\n                wakep()\n        }\n        if gp.lockedm != 0 {\n                // Hands off own p to the locked m,\n                // then blocks waiting for a new p.\n                startlockedm(gp)\n                goto retry\n        }\n\n        // Schedules gp to run on the current M.\n        execute(gp, inheritTime)\n}\n")),(0,r.yg)("h3",{id:"p-find-g"},"P Find G"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go"},"// LINE 2553\n// Finds a runnable goroutine to execute.\n// Tries to steal from other P's, get g from local or global queue, poll network.\n// if no any work found the m stops to wait forever\nfunc findRunnable() (gp *g, inheritTime, tryWakeP bool) {\n\n        _g_ := getg()\n\n        // The conditions here and in handoffp must agree: if\n        // findrunnable would return a G to run, handoffp must start\n        // an M.\n\nretry:\n        _p_ := _g_.m.p.ptr()\n\n        // special cases for GC\n        { ... }\n\n        // now and pollUntil are saved for work stealing later,\n        // which may steal timers. It's important that between now\n        // and then, nothing blocks, so these numbers remain mostly\n        // relevant.\n        now, pollUntil, _ := checkTimers(_p_, 0)\n\n        // Try to schedule a GC worker.\n        { ... }\n\n        // Check the global runnable queue once in a while to ensure fairness.\n        // Otherwise two goroutines can completely occupy the local runqueue\n        // by constantly respawning each other.\n        if _p_.schedtick%61 == 0 && sched.runqsize > 0 {\n                return some_g_from_global_runq()\n        }\n\n        // Wake up the finalizer G.\n        { ... }\n\n        // find in local runq\n        if gp, inheritTime := runqget(_p_); gp != nil {\n                return gp, inheritTime, false\n        }\n\n        // find in global runq\n        if sched.runqsize != 0 {\n                return some_g_from_global_runq()\n        }\n\n        // If some netpoll IO is ready,\n        // schedule to run that g\n        { ... }\n\n        // Spinning Ms: steal work from other Ps.\n        //\n        // Limit the number of spinning Ms to half the number of busy Ps.\n        // This is necessary to prevent excessive CPU consumption when\n        // GOMAXPROCS>>1 but the program parallelism is low.\n        procs := uint32(gomaxprocs)\n        if _g_.m.spinning || 2*atomic.Load(&sched.nmspinning) < procs-atomic.Load(&sched.npidle) {\n                if !_g_.m.spinning {\n                        _g_.m.spinning = true\n                        sched.nmspinning++\n                }\n\n                gp, inheritTime, tnow, w, newWork := stealWork(now) // IMPORTANT!\n                now = tnow\n                if gp != nil {\n                        // Successfully stole.\n                        return gp, inheritTime, false\n                }\n        }\n\n        // We have nothing to do.\n        //\n        // If we're in the GC mark phase, can safely scan and blacken objects,\n        // and have work to do, run idle-time marking rather than give up the P.\n        if gcBlackenEnabled != 0 && gcMarkWorkAvailable(_p_) && gcController.addIdleMarkWorker() {\n                if !gcBgMarkWorkerPool.empty() {\n                        // return the gc mark worker\n                        return ...\n                }\n        }\n\n        // current P has no any work to dy\n        // so add it to idle-P-list\n        now = pidleput(_p_, now)\n        unlock(&sched.lock)\n\n        // Delicate dance: thread transitions from spinning to non-spinning\n        // state, potentially concurrently with submission of new work. We must\n        // drop nmspinning first and then check all sources again (with\n        // #StoreLoad memory barrier in between). If we do it the other way\n        // around, another thread can submit work after we've checked all\n        // sources but before we drop nmspinning; as a result nobody will\n        // unpark a thread to run the work.\n        //\n        // This applies to the following sources of work:\n        //\n        // * Goroutines added to a per-P run queue.\n        // * New/modified-earlier timers on a per-P timer heap.\n        // * Idle-priority GC work (barring golang.org/issue/19112).\n        //\n        // If we discover new work below, we need to restore m.spinning as a signal\n        // for resetspinning to unpark a new worker thread (because there can be more\n        // than one starving goroutine). However, if after discovering new work\n        // we also observe no idle Ps it is OK to skip unparking a new worker\n        // thread: the system is fully loaded so no spinning threads are required.\n        // Also see \"Worker thread parking/unparking\" comment at the top of the file.\n        wasSpinning := _g_.m.spinning\n        if _g_.m.spinning {\n                _g_.m.spinning = false\n\n                // Note the for correctness, only the last M transitioning from\n                // spinning to non-spinning must perform these rechecks to\n                // ensure no missed work. We are performing it on every M that\n                // transitions as a conservative change to monitor effects on\n                // latency. See golang.org/issue/43997.\n\n                // Check all runqueues once again.\n                { ... }\n\n                // Check for idle-priority GC work again.\n                { ... }\n\n                // Finally, check for timer creation or expiry concurrently with\n                // transitioning from spinning to non-spinning.\n                //\n                // Note that we cannot use checkTimers here because it calls\n                // adjusttimers which may need to allocate memory, and that isn't\n                // allowed when we don't have an active P.\n                pollUntil = checkTimersNoP(allpSnapshot, timerpMaskSnapshot, pollUntil)\n        }\n\n        // Poll network until next timer.\n        // If some netpoll IO is ready,\n        // dispatch them\n        { ... }\n\n        stopm() // till awaken\n        goto retry\n}\n\n// netpoll checks for ready network connections.\n// Returns list of goroutines that become runnable.\n// delay < 0: blocks indefinitely\n// delay == 0: does not block, just polls\n// delay > 0: block for up to that many nanoseconds\nfunc netpoll(delay int64) gList\n\n// injectglist adds each runnable G on the list to some run queue,\n// and clears glist. If there is no current P, they are added to the\n// global queue, and up to npidle M's are started to run them.\n// Otherwise, for each idle P, this adds a G to the global queue\n// and starts an M. Any remaining G's are added to the current P's\n// local run queue.\n// This may temporarily acquire sched.lock.\n// Can run concurrently with GC.\nfunc injectglist(glist *gList)\n\n// Stops execution of the current m until new work is available.\n// Returns with acquired P.\nfunc stopm()\n")),(0,r.yg)("h3",{id:"steal-work"},"Steal Work"),(0,r.yg)("p",null,"\u6309\u968f\u673a\u7684\u987a\u5e8f\uff0c\u4ece\u5404\u4e2aP\u4e2d\u641c\u7d22\uff0c\u5982\u679c\u6709\u53ef\u7528\u7684G\uff0c\u5c31\u62ff\u4e00\u534a\u8fc7\u6765\u6267\u884c"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go"},"// LINE 2897\n// stealWork attempts to steal a runnable goroutine or timer from any P.\n//\n// If newWork is true, new work may have been readied.\n//\n// If now is not 0 it is the current time. stealWork returns the passed time or\n// the current time if now was passed as 0.\nfunc stealWork(now int64) (gp *g, inheritTime bool, rnow, pollUntil int64, newWork bool) {\n        pp := getg().m.p.ptr()\n\n        ranTimer := false\n\n        const stealTries = 4\n        for i := 0; i < stealTries; i++ {\n                stealTimersOrRunNextG := i == stealTries-1\n\n                for _, p2 := range shuffled(allp) {\n                        pos := indexof(p2, allp)\n\n                        // steal timers before steal runnext\n                        // why branch for last round ???\n                        if stealTimersOrRunNextG  {\n                                tnow, w, ran := checkTimers(p2, now)\n                                { ... }\n                        }\n\n                        // try to steal from p2\n                        if gp := runqsteal(pp, p2, stealTimersOrRunNextG); gp != nil {\n                                return gp, false, now, pollUntil, ranTimer\n                        }\n                }\n        }\n\n        // No goroutines found to steal. Regardless, running a timer may have\n        // made some goroutine ready that we missed. Indicate the next timer to\n        // wait for.\n        return nil, false, now, pollUntil, ranTimer\n}\n\n// LINE 6010\n// Steal half of elements from local runnable queue of p2\n// and put onto local runnable queue of p.\n// Returns one of the stolen elements (or nil if failed).\nfunc runqsteal(_p_, p2 *p, stealRunNextG bool) *g {\n        t := _p_.runqtail\n        n := runqgrab(p2, &_p_.runq, t, stealRunNextG)\n        if n == 0 {\n                return nil\n        }\n        n--\n        gp := _p_.runq[(t+n)%uint32(len(_p_.runq))].ptr()\n        if n == 0 {\n                return gp\n        }\n        h := atomic.LoadAcq(&_p_.runqhead) // load-acquire, synchronize with consumers\n        \n        atomic.StoreRel(&_p_.runqtail, t+n) // store-release, makes the item available for consumption\n        return gp\n}\n")),(0,r.yg)("h3",{id:"handoff"},"Handoff"),(0,r.yg)("p",null,"\u5f53\u524d M \u56e0 G \u8fdb\u884c\u7cfb\u7edf\u8c03\u7528\u800c\u963b\u585e\u65f6\uff0cM \u91ca\u653e P\uff0c\u628a P \u8f6c\u79fb\u5230\u5176\u4ed6\u7a7a\u95f2 M \u6267\u884c"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go"},"// LINE 3704\nfunc entersyscallblock() {\n        ...\n        systemstack(entersyscallblock_handoff)\n}\n\nfunc entersyscallblock_handoff() {\n        pp := releasep() // Disassociate p and the current m.\n        handoffp(pp)\n}\n\n// LINE 2346\n// Hands off P from syscall or locked M.\nfunc handoffp(_p_ *p) {\n        // handoffp must start an M in any situation where\n        // findrunnable would return a G to run on _p_.\n\n        // if it has local work, start it straight away\n        if !runqempty(_p_) || sched.runqsize != 0 {\n                startm(_p_, false)\n                return\n        }\n        \n        // if it has GC work, start it straight away\n        if gcBlackenEnabled != 0 && gcMarkWorkAvailable(_p_) {\n                startm(_p_, false)\n                return\n        }\n\n        // no local work, check that there are no spinning/idle M's,\n        // otherwise our help is not required\n        if atomic.Load(&sched.nmspinning)+atomic.Load(&sched.npidle) == 0 && atomic.Cas(&sched.nmspinning, 0, 1) {\n                startm(_p_, true)\n                return\n        }\n\n        lock(&sched.lock)\n        \n        // deal with gc\n        { ... }\n\n        if sched.runqsize != 0 {\n                unlock(&sched.lock)\n                startm(_p_, false)\n                return\n        }\n\n        // If this is the last running P and nobody is polling network,\n        // need to wakeup another M to poll network.\n        if sched.npidle == uint32(gomaxprocs-1) && atomic.Load64(&sched.lastpoll) != 0 {\n                unlock(&sched.lock)\n                startm(_p_, false)\n                return\n        }\n\n        // The scheduler lock cannot be held when calling wakeNetPoller below\n        // because wakeNetPoller may call wakep which may call startm.\n        pidleput(_p_, 0)\n        unlock(&sched.lock)\n}\n\n// LINE 2261\n// Schedules some M to run the p (creates an M if necessary).\n// If p==nil, tries to get an idle P, if no idle P's does nothing.\n// If spinning is set, the caller has incremented nmspinning and startm will\n// either decrement nmspinning or set m.spinning in the newly started M.\nfunc startm(_p_ *p, spinning bool)\n")),(0,r.yg)("h3",{id:"\u62a2\u5360\u673a\u5236"},"\u62a2\u5360\u673a\u5236"),(0,r.yg)("p",null,"\u5728Golang\u4e2d\uff0c\u5b58\u5728\u4e00\u4e2a\u5168\u5c40\u76d1\u63a7\u7ebf\u7a0b",(0,r.yg)("inlineCode",{parentName:"p"},"sysmon")),(0,r.yg)("p",null,"\u8fd9\u4e2a\u7ebf\u7a0b\u662f\u4e00\u4e2a\u6b7b\u5faa\u73af\uff0c\u5e76\u4e14\u4f1a\u5b9a\u65f6\u8c03\u7528",(0,r.yg)("inlineCode",{parentName:"p"},"retake()"),"\u6765\u89e6\u53d1Goroutine\u62a2\u5360"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go"},"// LINE 5126\nfunc sysmon() {\n    for {\n        usleep(delay)\n        ...\n        retake(now)\n        ...\n    }\n}\n")),(0,r.yg)("p",null,"\u8fdb\u4e00\u6b65\u6765\u770bretake\u7684\u62a2\u5360\u5b9e\u73b0"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go"},"// LINE 5283\n// returns: chandoffed Ps in _Psyscall\n// lock operations omitted\nfunc retake(now int64) uint32 {\n    n := 0\n    \n    for i := 0; i < len(allp); i++ {\n        _p_ := allp[i]\n\n        pd := &_p_.sysmontick\n        s := _p_.status\n\n        if s == _Prunning || s == _Psyscall {\n            // Preempt G if it's running for too long.\n            if pd.schedwhen+forcePreemptNS <= now {\n                \n                // NOTE: \n                // this function sets a flag to G and\n                // 'try' to send signal to thread to break\n                // G is not instantly switched if OS doesn't support signal\n                // or thread is too busy to proceed signal\n                preemptone(_p_)\n            }\n        }\n        if s == _Psyscall {\n            // Retake P from syscall if it's there for more than 1 sysmon tick (at least 20us).\n    \n            // TODO: when and why to skip handoff ??\n\n            // On the one hand we don't want to retake Ps if there is no other work to do,\n            // but on the other hand we want to retake them eventually\n            // because they can prevent the sysmon thread from deep sleep.\n            if runqempty(_p_) && atomic.Load(&sched.nmspinning)+atomic.Load(&sched.npidle) > 0 && pd.syscallwhen+10*1000*1000 > now {\n                    continue\n            }\n\n            _p_.status = _Pidle\n            n++\n            _p_.syscalltick++\n            handoffp(_p_)\n        }\n    }\n    \n    unlock(&allpLock)\n    return uint32(n)\n}\n")),(0,r.yg)("hr",null),(0,r.yg)("p",null,"\u5173\u4e8e\u5f02\u6b65\u62a2\u5360\uff0c\u53ef\u4ee5\u770b\u770b\u8fd9\u4e2a"),(0,r.yg)("p",null,"Q\uff1a\u8fd9\u4e48\u8bf4\uff0c\u4e0d\u652f\u6301\u5f02\u6b65\u62a2\u5360\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u5c82\u4e0d\u662f\u6b7b\u5faa\u73af\u5c31\u6c38\u8fdc\u5361\u6b7b\u6389\u4e86"),(0,r.yg)("p",null,"\u2014\u2014\u597d\u50cf\u4e5f\u6709\u9053\u7406\uff0c\u6bd5\u7adfgolang\u6ca1\u6709\u865a\u62df\u673a"),(0,r.yg)("p",null,"\u2014\u2014\u5417\uff1f"))}c.isMDXComponent=!0},5910:(n,e,t)=>{t.d(e,{A:()=>o});const o=t.p+"assets/images/Y4yebbyrRoCZzlxdsADcjumenKf-e950d534336f2ffcda9ae7979e59b256.png"},15680:(n,e,t)=>{t.d(e,{xA:()=>g,yg:()=>h});var o=t(96540);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,o)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,o,r=function(n,e){if(null==n)return{};var t,o,r={},a=Object.keys(n);for(o=0;o<a.length;o++)t=a[o],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(o=0;o<a.length;o++)t=a[o],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var s=o.createContext({}),u=function(n){var e=o.useContext(s),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},g=function(n){var e=u(n.components);return o.createElement(s.Provider,{value:e},n.children)},p="mdxType",c={inlineCode:"code",wrapper:function(n){var e=n.children;return o.createElement(o.Fragment,{},e)}},d=o.forwardRef((function(n,e){var t=n.components,r=n.mdxType,a=n.originalType,s=n.parentName,g=l(n,["components","mdxType","originalType","parentName"]),p=u(t),d=r,h=p["".concat(s,".").concat(d)]||p[d]||c[d]||a;return t?o.createElement(h,i(i({ref:e},g),{},{components:t})):o.createElement(h,i({ref:e},g))}));function h(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var a=t.length,i=new Array(a);i[0]=d;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=n,l[p]="string"==typeof n?n:r,i[1]=l;for(var u=2;u<a;u++)i[u]=t[u];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},33464:(n,e,t)=>{t.d(e,{A:()=>o});const o=t.p+"assets/images/KtqAb5HVYoAEz4xsMqJce4Qun9i-25b8179a505511801cf69b58c9cd2964.png"},37950:(n,e,t)=>{t.d(e,{A:()=>o});const o=t.p+"assets/images/XenWbjoEIoOeNnxINuSc9Mlanhh-942fb0e1e6873b52a899e556351f4ce8.png"},43354:(n,e,t)=>{t.d(e,{A:()=>o});const o=t.p+"assets/images/DhOTbZievoPOmLxG8TTcfNtVnib-2cea52b81872ab34c18f2dd8735d9f90.png"}}]);