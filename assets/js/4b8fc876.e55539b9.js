"use strict";(self.webpackChunkcs_engineering=self.webpackChunkcs_engineering||[]).push([[741],{15680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>y});var a=t(96540);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=a.createContext({}),d=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=d(e.components);return a.createElement(s.Provider,{value:n},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=d(t),g=l,y=p["".concat(s,".").concat(g)]||p[g]||c[g]||r;return t?a.createElement(y,i(i({ref:n},u),{},{components:t})):a.createElement(y,i({ref:n},u))}));function y(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var r=t.length,i=new Array(r);i[0]=g;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[p]="string"==typeof e?e:l,i[1]=o;for(var d=2;d<r;d++)i[d]=t[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},26992:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var a=t(58168),l=(t(96540),t(15680));const r={title:"\u641c\u7d22\u7b97\u6cd5",slug:"\u641c\u7d22\u7b97\u6cd5",sidebar_position:0},i="\u641c\u7d22\u7b97\u6cd5",o={unversionedId:"\u8f6f\u4ef6\u79d1\u7814\u6280\u80fd\u6811/\u4eba\u5de5\u667a\u80fdAI/\u673a\u5668\u5b66\u4e60ML/\u641c\u7d22\u7b97\u6cd5/\u641c\u7d22\u7b97\u6cd5",id:"\u8f6f\u4ef6\u79d1\u7814\u6280\u80fd\u6811/\u4eba\u5de5\u667a\u80fdAI/\u673a\u5668\u5b66\u4e60ML/\u641c\u7d22\u7b97\u6cd5/\u641c\u7d22\u7b97\u6cd5",title:"\u641c\u7d22\u7b97\u6cd5",description:"\u641c\u7d22\uff0c\u5373\u901a\u8fc7\u4e00\u5b9a\u7b56\u7565\u7684\u904d\u5386\u5404\u79cd\u60c5\u51b5\uff0c\u6765\u5f97\u5230\u4e00\u573a\u6e38\u620f\u7684\u6700\u4f18\u51b3\u7b56\u65b9\u5f0f",source:"@site/docs/\u8f6f\u4ef6\u79d1\u7814\u6280\u80fd\u6811/\u4eba\u5de5\u667a\u80fdAI/\u673a\u5668\u5b66\u4e60ML/\u641c\u7d22\u7b97\u6cd5/\u641c\u7d22\u7b97\u6cd5.md",sourceDirName:"\u8f6f\u4ef6\u79d1\u7814\u6280\u80fd\u6811/\u4eba\u5de5\u667a\u80fdAI/\u673a\u5668\u5b66\u4e60ML/\u641c\u7d22\u7b97\u6cd5",slug:"/\u8f6f\u4ef6\u79d1\u7814\u6280\u80fd\u6811/\u4eba\u5de5\u667a\u80fdAI/\u673a\u5668\u5b66\u4e60ML/\u641c\u7d22\u7b97\u6cd5/\u641c\u7d22\u7b97\u6cd5",permalink:"/cs-engineering/\u8f6f\u4ef6\u79d1\u7814\u6280\u80fd\u6811/\u4eba\u5de5\u667a\u80fdAI/\u673a\u5668\u5b66\u4e60ML/\u641c\u7d22\u7b97\u6cd5/\u641c\u7d22\u7b97\u6cd5",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/\u8f6f\u4ef6\u79d1\u7814\u6280\u80fd\u6811/\u4eba\u5de5\u667a\u80fdAI/\u673a\u5668\u5b66\u4e60ML/\u641c\u7d22\u7b97\u6cd5/\u641c\u7d22\u7b97\u6cd5.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{title:"\u641c\u7d22\u7b97\u6cd5",slug:"\u641c\u7d22\u7b97\u6cd5",sidebar_position:0},sidebar:"sidebar",previous:{title:"\u673a\u5668\u5b66\u4e60 ML",permalink:"/cs-engineering/\u8f6f\u4ef6\u79d1\u7814\u6280\u80fd\u6811/\u4eba\u5de5\u667a\u80fdAI/\u673a\u5668\u5b66\u4e60ML/\u673a\u5668\u5b66\u4e60 ML"},next:{title:"\u673a\u5668\u63a8\u7406",permalink:"/cs-engineering/\u8f6f\u4ef6\u79d1\u7814\u6280\u80fd\u6811/\u4eba\u5de5\u667a\u80fdAI/\u673a\u5668\u5b66\u4e60ML/\u673a\u5668\u63a8\u7406/\u673a\u5668\u63a8\u7406"}},s={},d=[{value:"\u51b3\u7b56\u6a21\u578b",id:"\u51b3\u7b56\u6a21\u578b",level:2},{value:"\u641c\u7d22\u6a21\u578b",id:"\u641c\u7d22\u6a21\u578b",level:2},{value:"BFS",id:"bfs",level:2},{value:"DFS",id:"dfs",level:2},{value:"A-Star",id:"a-star",level:2},{value:"\u6574\u4f53\u601d\u8def",id:"\u6574\u4f53\u601d\u8def",level:3},{value:"\u542f\u53d1\u51fd\u6570\u7684\u8bbe\u8ba1",id:"\u542f\u53d1\u51fd\u6570\u7684\u8bbe\u8ba1",level:3},{value:"Iterative Deepening Search",id:"iterative-deepening-search",level:2},{value:"Uniform Cost Search    UCS",id:"uniform-cost-search----ucs",level:2},{value:"MonteCarlo Tree Search    MCTS",id:"montecarlo-tree-search----mcts",level:2},{value:"\u8499\u7279\u5361\u6d1b\u65b9\u6cd5",id:"\u8499\u7279\u5361\u6d1b\u65b9\u6cd5",level:3},{value:"\u7b97\u6cd5\u6d41\u7a0b",id:"\u7b97\u6cd5\u6d41\u7a0b",level:2},{value:"\u8282\u70b9\u8bc4\u5206\u8ba1\u7b97",id:"\u8282\u70b9\u8bc4\u5206\u8ba1\u7b97",level:2},{value:"<b>\u63a2\u7d22\u548c\u5229\u7528</b>",id:"\u63a2\u7d22\u548c\u5229\u7528",level:3},{value:"\u6a21\u62df\u9000\u706b",id:"\u6a21\u62df\u9000\u706b",level:3},{value:"UCB",id:"ucb",level:3}],u={toc:d},p="wrapper";function c(e){let{components:n,...r}=e;return(0,l.yg)(p,(0,a.A)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,l.yg)("h1",{id:"\u641c\u7d22\u7b97\u6cd5"},"\u641c\u7d22\u7b97\u6cd5"),(0,l.yg)("p",null,"\u641c\u7d22\uff0c\u5373\u901a\u8fc7\u4e00\u5b9a\u7b56\u7565\u7684\u904d\u5386\u5404\u79cd\u60c5\u51b5\uff0c\u6765\u5f97\u5230\u4e00\u573a\u6e38\u620f\u7684\u6700\u4f18\u51b3\u7b56\u65b9\u5f0f"),(0,l.yg)("h1",{id:"\u57fa\u672c\u6982\u5ff5"},"\u57fa\u672c\u6982\u5ff5"),(0,l.yg)("h2",{id:"\u51b3\u7b56\u6a21\u578b"},"\u51b3\u7b56\u6a21\u578b"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"\u72b6\u6001\u7a7a\u95f4State Space\uff1a\u5f53\u524d\u6240\u5904\u7684\u4f4d\u7f6e"),(0,l.yg)("li",{parentName:"ul"},"\u884c\u52a8\u7a7a\u95f4Action Space\uff1a\u5f53\u524d\u53ef\u4ee5\u91c7\u53d6\u7684\u51b3\u7b56\u884c\u52a8"),(0,l.yg)("li",{parentName:"ul"},"\u5956\u52b1\u51fd\u6570Reward Func\uff1a\u6267\u884c\u5f53\u524d\u6b65\u9aa4\u7684\u4ef7\u503c"),(0,l.yg)("li",{parentName:"ul"},"\u51b3\u7b56\u6a21\u578b\uff1a",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"\u8fdb\u884c\u51b3\u7b56\uff1aAction = Decide(State, Reward)"),(0,l.yg)("li",{parentName:"ul"},"\u5b9e\u884c\u5e76\u89c2\u6d4b\uff1aState , Reward  = Step(State, Action)")))),(0,l.yg)("div",{class:"callout callout-bg-2 callout-border-2"},(0,l.yg)("div",{class:"callout-emoji"},"\ud83d\udcac"),(0,l.yg)("p",null,"Eg. \u4e0b\u68cb"),(0,l.yg)("p",null,"\u72b6\u6001\u7a7a\u95f4\uff1a\u68cb\u76d8\u4e0a\u843d\u5b50\u60c5\u51b5"),(0,l.yg)("p",null,"\u884c\u52a8\u7a7a\u95f4\uff1a\u5728\u4e0d\u540c\u53ef\u843d\u5b50\u7684\u5730\u65b9\u843d\u5b50"),(0,l.yg)("p",null,"\u5956\u52b1\uff1a\u5f53\u524d\u65f6\u523b\u7ed3\u675f\u7684\u8bdd\uff0c\u603b\u5f97\u5206\uff08\u611f\u89c9\u53ef\u4ee5\u6709\u5f88\u591a\u79cd\u5956\u52b1\u51fd\u6570\uff09")),(0,l.yg)("h2",{id:"\u641c\u7d22\u6a21\u578b"},"\u641c\u7d22\u6a21\u578b"),(0,l.yg)("p",null,"\u72b6\u6001\u662f\u8282\u70b9\uff0c\u884c\u4e3a\u662f\u6709\u5411\u8fb9"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"\u6811\u6a21\u578b\uff1a\u6bcf\u4e00\u5c42\u662f\u4e00\u4e2a\u65f6\u523b\u7684\u72b6\u6001\uff0c\u5b50\u8282\u70b9\u8868\u793a\u51b3\u7b56\u540e\u7684\u65b0\u72b6\u6001"),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"\u5b58\u5728\u72b6\u6001\u8282\u70b9\u91cd\u590d\uff0c\u4e0d\u6613\u590d\u7528\uff1b\u4fbf\u4e8e\u8868\u793a\u968f\u51b3\u7b56\u8fdb\u5ea6\u884c\u52a8\u7a7a\u95f4\u4f1a\u53d1\u751f\u53d8\u5316\u7684\u60c5\u51b5"))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"\u56fe\u6a21\u578b\uff1a\u8868\u793a\u72b6\u6001\u4e4b\u95f4\u6240\u6709\u53ef\u80fd\u7684\u8f6c\u79fb\u5173\u7cfb"),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"\u72b6\u6001\u8282\u70b9\u548c\u884c\u4e3a\u552f\u4e00\uff0c\u65b9\u4fbf\u5b58\u50a8\u548c\u4f18\u5316\uff1b\u4fbf\u4e8e\u8868\u793a\u591a\u6b21\u91cd\u590d\u535a\u5f08")))),(0,l.yg)("h1",{id:"\u5178\u578b\u641c\u7d22\u7b97\u6cd5"},"\u5178\u578b\u641c\u7d22\u7b97\u6cd5"),(0,l.yg)("h2",{id:"bfs"},"BFS"),(0,l.yg)("p",null,"\u5c31\u4e0d\u8bf4\u4e86\uff0c\u4f18\u5316\u4e4b\u540e\u662fA*"),(0,l.yg)("h2",{id:"dfs"},"DFS"),(0,l.yg)("p",null,"\u5c31\u4e0d\u8bf4\u4e86\uff0c\u4f18\u5316\u4e4b\u540e\u662fIterative Deepening Search"),(0,l.yg)("h2",{id:"a-star"},"A-Star"),(0,l.yg)("p",null,"\u542f\u53d1\u5f0f\u4f18\u5316\u7684BFS\u641c\u7d22"),(0,l.yg)("h3",{id:"\u6574\u4f53\u601d\u8def"},"\u6574\u4f53\u601d\u8def"),(0,l.yg)("p",null,"\u8bbe\u8ba1\u4e00\u4e2a\u542f\u53d1\u51fd\u6570H(S)"),(0,l.yg)("p",null,"\u7ef4\u62a4\u4e00\u4e2a\u4f18\u5148\u961f\u5217PQ"),(0,l.yg)("p",null,"\u6309\u7167\u5982\u4e0b\u987a\u5e8f\u904d\u5386\u8282\u70b9"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"PQ.add(0, S0)\nwhile not PQ.empty():\n    S = PQ.popmax()\n    do_something_with(S)\n    for N in S.neighbors:\n        h = H(x) + Cost(S)\n        PQ.add(h, N)\n")),(0,l.yg)("h3",{id:"\u542f\u53d1\u51fd\u6570\u7684\u8bbe\u8ba1"},"\u542f\u53d1\u51fd\u6570\u7684\u8bbe\u8ba1"),(0,l.yg)("p",null,"\u6240\u8c13\u7684\u542f\u53d1\u5f0f\uff0c\u5b9e\u9645\u4e0a\u662f\u5229\u7528\u7684\u95ee\u9898\u72ec\u7279\u7684\u7279\u6027\uff0c\u6765\u6307\u5f15\u641c\u7d22\u7684\u5927\u4f53\u65b9\u5411"),(0,l.yg)("p",null,"\u542f\u53d1\u51fd\u6570\u5177\u6709\u5982\u4e0b",(0,l.yg)("b",null,"\u5fc5\u8981\u6027\u8d28\uff1a")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Admissive\uff1a\u3010\u4e50\u89c2\u4f30\u8ba1\u3011\u8981\u6c42H(x)\u5c0f\u4e8ex\u5230\u7ec8\u70b9\u7684\u6700\u77ed\u5f00\u9500"),(0,l.yg)("li",{parentName:"ul"},"Consistent\uff1aH(x)\u4e0ex\u5230\u7ec8\u70b9\u7684\u6700\u77ed\u5f00\u9500\u4e00\u540c\u51cf\u5c0f"),(0,l.yg)("li",{parentName:"ul"},"Precise\uff1a\u3010\u4e50\u89c2\u4f30\u8ba1\u3011\u8981\u5c3d\u91cf\u8d34\u8fd1\u771f\u5b9e\u6700\u77ed\u8def\u5f84\u60c5\u51b5",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"\u5982\u679cH(x)=0, \u5219\u9000\u5316\u4e3aBFS"),(0,l.yg)("li",{parentName:"ul"},"\u5982\u679cH(x)=\u6700\u77ed\u8def\u5f84\uff0c\u5219\u4e0d\u53ef\u5728\u5e38\u6570\u65f6\u95f4\u5b9e\u73b0")))),(0,l.yg)("p",null,"\u5728\u6b27\u6c0f\u8ddd\u79bb\u4f5c\u4e3a\u542f\u53d1\u51fd\u6570\u65f6\uff0c\u7ed9\u51fa\u4e09\u6761\u6027\u8d28\u7684\u5177\u4f53\u8868\u8ff0"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"\u76f4\u7ebf\u8ddd\u79bb\u6bd4\u6298\u7ebf\u8ddd\u79bb\u77ed"),(0,l.yg)("li",{parentName:"ul"},"\u76f4\u7ebf\u8ddd\u79bb\u548c\u6700\u77ed\u66f2\u7ebf\u8ddd\u79bb\u540c\u65f6\u51cf\u5c0f"),(0,l.yg)("li",{parentName:"ul"},"\u9760\u8fd1\u7ec8\u70b9\u65f6\uff0c\u542f\u53d1\u51fd\u6570\u8fd1\u4f3c\u7b49\u4e8e\u771f\u5b9e\u8ddd\u79bb")),(0,l.yg)("h2",{id:"iterative-deepening-search"},"Iterative Deepening Search"),(0,l.yg)("p",null,"\u57fa\u4e8eDFS\u6811\u641c\u7d22\u4f18\u5316\uff0c\u6bcf\u4e00\u8f6e\u9012\u589e\u6df1\u5ea6d\uff0c\u53ea\u641c\u7d22\u6df1\u5ea6d\u7684\u8282\u70b9"),(0,l.yg)("h2",{id:"uniform-cost-search----ucs"},"Uniform Cost Search    ","[UCS]"),(0,l.yg)("p",null,"\u662fdijkstra\u7684\u589e\u5e7f\u6a21\u578b\uff1b\u6bcf\u4e2a\u70b9\u7684\u5386\u53f2\u603b\u6743\u91cd\u57fa\u4e8e\u641c\u7d22\u83b7\u5f97\uff0c\u4e0d\u4e00\u5b9a\u662f\u5230\u8d77\u70b9\u7684\u6700\u77ed\u8ddd\u79bb"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"\u6bcf\u6b21\u7ef4\u62a4frontier\u6570\u7ec4\uff0c\u8868\u793a\u5df2\u66f4\u65b0\u8fc7value\u7684\u8282\u70b9"),(0,l.yg)("li",{parentName:"ul"},"\u6bcf\u4e00\u8f6e\u4ecefrontier\u4e2d\u904d\u5386\u8282\u70b9\u8fdb\u884c\u4e0b\u4e00\u6b65\u641c\u7d22")),(0,l.yg)("h2",{id:"montecarlo-tree-search----mcts"},"MonteCarlo Tree Search    ","[MCTS]"),(0,l.yg)("h3",{id:"\u8499\u7279\u5361\u6d1b\u65b9\u6cd5"},"\u8499\u7279\u5361\u6d1b\u65b9\u6cd5"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"\u57fa\u4e8e\u5927\u6570\u5b9a\u5f8b\uff0c\u4f7f\u7528\u968f\u673a\u5316\u7684\u91c7\u6837\u7ed3\u679c\u8fd1\u4f3c\u4ee3\u66ff\u771f\u5b9e\u7ed3\u679c\u7684\u4e00\u7c7b\u7b97\u6cd5\u8bbe\u8ba1\u601d\u60f3")),(0,l.yg)("h2",{id:"\u7b97\u6cd5\u6d41\u7a0b"},"\u7b97\u6cd5\u6d41\u7a0b"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Selection \u9009\u62e9",(0,l.yg)("b",null,"\u6700\u60f3\u63a2\u7d22"),"\u7684\u5b50\u8282\u70b9"),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"argmax\uff1a\u5404\u4e2a\u53f6\u8282\u70b9\u7684",(0,l.yg)("b",null,"\u8bc4\u5206rank")))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Expansion \u751f\u6210\u4e00\u4e2a",(0,l.yg)("b",null,"\u4e0b\u4e00\u6b65\u51b3\u7b56"))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Simulation "),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"\u5230\u6b64\u8282\u70b9\u7684\u8def\u5f84\u4e3a\u524dN\u6b21",(0,l.yg)("b",null,"\u5df2\u77e5"),"\u51b3\u7b56"),(0,l.yg)("li",{parentName:"ul"},"\u4ece\u6b64\u51b3\u7b56\u5f00\u59cb\uff0c",(0,l.yg)("b",null,"\u968f\u673a"),"\u5411\u4e0b",(0,l.yg)("b",null,"\u6a21\u62df\u51b3\u7b56")),(0,l.yg)("li",{parentName:"ul"},"\u5f97\u5230\u8bd5\u9a8c",(0,l.yg)("b",null,"\u5f97\u5206")))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"BackPropagation"),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"\u57fa\u4e8e\u8bd5\u9a8c",(0,l.yg)("b",null,"\u5f97\u5206"),"\uff0c\u5237\u65b0\u641c\u7d22\u6570\u5404\u7ea7\u7236\u4eb2\u7684",(0,l.yg)("b",null,"\u8bc4\u5206rank")))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"\u5faa\u73af1-4\u6b65\uff0c\u76f4\u5230\u8fbe\u5230\u7ed3\u675f\u6761\u4ef6"),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"\u7ed3\u675f\u6761\u4ef6\uff1a\u5faa\u73af\u6b21\u6570\u3001\u7ed3\u679c\u7cbe\u5ea6\u7b49")))),(0,l.yg)("h2",{id:"\u8282\u70b9\u8bc4\u5206\u8ba1\u7b97"},"\u8282\u70b9\u8bc4\u5206\u8ba1\u7b97"),(0,l.yg)("h3",{id:"\u63a2\u7d22\u548c\u5229\u7528"},(0,l.yg)("b",null,"\u63a2\u7d22\u548c\u5229\u7528")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"\u5728\u9009\u62e9\u8282\u70b9\u65f6\uff0c\u901a\u5e38\u9762\u5bf9\u7684\u4e00\u4e2a\u95ee\u9898\u662f",(0,l.yg)("b",null,"\u63a2\u7d22\u548c\u5229\u7528(Exploration & Exploitation)"),"\u7684\u51b2\u7a81"),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"\u5f53\u504f\u5411\u63a2\u7d22\uff0c\u5219\u641c\u7d22\u6536\u655b\u901f\u5ea6\u975e\u5e38\u6162"),(0,l.yg)("li",{parentName:"ul"},"\u5f53\u504f\u5411\u5229\u7528\uff0c\u5219\u53ef\u80fd\u56e0\u4e3a\u8d2a\u5fc3\u7b56\u7565\u9677\u5165\u5c40\u90e8\u6700\u4f18\u89e3"))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"\u4e3a\u4e86\u89e3\u51b3\u6b64\u51b2\u7a81\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e9b\u5408\u7406\u7684\u8bc4\u5206\u7b97\u6cd5\uff0c\u8be5\u7b97\u6cd5"),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"\u5728\u641c\u7d22\u65e9\u671f\u6ce8\u91cd\u968f\u673a\u5316\u63a2\u7d22"),(0,l.yg)("li",{parentName:"ul"},"\u5728\u641c\u7d22\u672b\u671f\u6ce8\u91cd\u6700\u4f18\u89e3\u90bb\u57df\u8fdb\u884c\u4f18\u5316")))),(0,l.yg)("h3",{id:"\u6a21\u62df\u9000\u706b"},"\u6a21\u62df\u9000\u706b"),(0,l.yg)("p",null,"\u4e00\u79cd\u663e\u7136\u7684\u60f3\u6cd5\u7c7b\u4f3c\u4e8e\u6a21\u62df\u9000\u706b"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"\u6839\u636e\u641c\u7d22\u8fdb\u5ea6\uff0c\u5728\u8d2a\u5fc3\u7b56\u7565\u4e2d\u4ee5\u9012\u51cf\u7684\u6982\u7387p\u63a5\u53d7\u975e\u6700\u4f18\u7ed3\u679c"),(0,l.yg)("li",{parentName:"ul"},"\u76f4\u5230\u6700\u540ep\u8d8b\u8fd1\u4e8e0\uff0c\u7ed3\u679c\u6536\u655b\u5230\u6700\u4f18\u641c\u7d22\u70b9")),(0,l.yg)("h3",{id:"ucb"},"UCB"),(0,l.yg)("p",null,"\u53e6\u5916\u4e00\u79cd\u5e38\u7528\u7684\u7b97\u6cd5\u662f",(0,l.yg)("b",null,"Upper Confidence Bound   ","[UCB]")),(0,l.yg)("p",null,"\u5176\u6570\u5b66\u63a8\u5bfc\u8f83\u4e3a\u590d\u6742\uff0c\u5728\u6b64\u7b80\u8ff0\u5176",(0,l.yg)("b",null,"\u6838\u5fc3\u601d\u60f3")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"\u7f6e\u4fe1\u5ea6C\u6570\u636e\u96c6\u5927\u5c0f\u7684\u5f71\u54cd"),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"C = sqrt(2*ln(cnt_visit[parent])/cnt_visit[curr])")))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"\u4ee4\u8bc4\u5206\u4e3a\u5386\u53f2\u641c\u7d22\u5e73\u5747\u503c\u5728\u7f6e\u4fe1\u5ea6\u4e0b\u7684\u4e0a\u754c\uff0c\u5373rank = avg(value) + C\u3010\u90a3\u4e2a\u6839\u53f7\u4e0blog\u7684\u590d\u6742\u4e1c\u897f\u3011\n",(0,l.yg)("img",{src:t(86890).A,width:"1719",height:"663"}))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"\u5219rank\u7684\u5927\u5c0f\u5373\u540c\u65f6\u8868\u5f81\u4e86\u63a2\u7d22\u6b21\u6570\u548c\u63a2\u7d22\u5f97\u5206\uff0c\u4e14\u968f\u65f6\u95f4\u63a8\u79fb\u8d8b\u5411\u4e8e\u63a2\u7d22\u5e73\u5747\u5206\u6570\u5b66\u671f\u671b")),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"UCT\uff1a\u56e0\u4e3aUCB\u548cMCTS\u7ed3\u5408\u7684\u7b97\u6cd5\u592a\u8fc7\u597d\u7528\u548c\u5e38\u7528\uff0c\u4ed6\u751a\u81f3\u6709\u4e86\u5355\u72ec\u7684\u540d\u5b57\u2014\u2014",(0,l.yg)("b",null,"UCT")))),(0,l.yg)("h3",{id:""}),(0,l.yg)("p",null,"\u4ee3\u7801\u6837\u4f8b"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-py"},'# algo.py\nimport math\nfrom random import randint, shuffle\nfrom typing import Callable, Iterable\n\nfrom gym.core import ActType\nfrom treelib import Node, Tree\n\nValueFunction = Callable[[Iterable[ActType]], float]\n\n\nclass NodeData:\n    def __init__(self, act: ActType) -> None:\n        self.act = act\n        self.is_end: bool = False\n        self.cnt_visit: int = 0\n        self.cnt_simulate: int = 0\n        self.total_reward: float = 0\n        self.quality: float = 0\n        self.is_end: bool = False\n        self.tried_acts: list[ActType] = []\n\n\nclass MCTS:\n    def __init__(self, simulate_callback: ValueFunction, actions: list[ActType]) -> None:\n        self.tree = Tree()\n        self.tree.create_node("ROOT", "ROOT", data=NodeData(None))\n        self.simulation_func = simulate_callback\n        self.round: int = 0\n        self.actions = actions\n        self.max_reward = 0\n\n    def run(self, total_rounds: int) -> list[ActType]:\n        root_node = self.tree[self.tree.root]\n        for self.round in range(total_rounds):\n            if self.round % 100 == 0:\n                print(f"round {self.round}")\n            old_leaf = self.select(root_node)\n            if old_leaf is None:\n                print("old_leaf is None!")\n                continue\n            new_leaf = self.expand(old_leaf)\n            if new_leaf is None:\n                print("new_leaf is None!")\n                continue\n            reward = self.simulate(new_leaf)\n            # print(f"score = {reward}")\n            if self.max_reward < reward:\n                print(f"max reward: {reward}")\n                self.max_reward = reward\n            self.back_propagate(new_leaf, reward)\n\n        best_leaf = self.select(root_node)\n        return self.acts_to_node(best_leaf)\n\n    def select(self, root: Node) -> Node:\n        while True:\n            childs = self.tree.children(root.identifier)\n            if len(childs)<2:\n                return root\n\n            best_score = -100\n            best_node: Node = None\n            for child in childs:\n                score = self.node_score(child)\n                if score >= best_score :\n                    best_score, best_node = score, child\n                    \n            if best_node is None:\n                root.data.is_end = True\n\n            root = best_node\n\n    def expand(self, node: Node) -> Node:\n        if node is None or len(node.data.tried_acts) == len(self.actions):\n            return node\n\n        # \u968f\u673a\u7b5b\u9009\u4e00\u4e2a\u6ca1\u5c1d\u8bd5\u8fc7\u7684act\n        acts = list(\n            filter(lambda act: act not in node.data.tried_acts, self.actions))\n        shuffle(acts)\n        act = acts[0]\n        node.data.tried_acts.append(act)\n        new_node = self.tree.create_node(data=NodeData(act), parent=node)\n        return new_node\n\n    def simulate(self, node: Node) -> float:\n        if node.data.is_end:\n            return 0\n\n        known_acts = self.acts_to_node(node)\n\n        # s = "".join(["l" if act==0 else "r" for act in known_acts])\n        # print(f"acts: {s}")\n        # print(f"len(acts)={len(known_acts)}")\n\n        def iter_acts():\n            for act in known_acts:\n                yield act\n            while True:\n                yield randint(0, 1)\n        score = self.simulation_func(iter_acts())\n        return score\n\n    def back_propagate(self, node: Node, reward: float):\n        path = self.path_to_node(node)\n        if reward < len(path)*0.8:\n            node.data.is_end = True\n            return\n\n        node.data.cnt_simulate += 1\n\n        for node in path:\n            node.data.total_reward += reward\n            node.data.cnt_visit += 1\n\n\n    def path_to_node(self, node: Node) -> list[Node]:\n        if node is None: return []\n        nodes = [node]\n        p = node\n        while p := self.tree.parent(p.identifier):\n            if p.is_root():\n                break\n            nodes.append(p)\n        nodes.reverse()\n        return nodes\n\n    def acts_to_node(self, node: Node) -> list[ActType]:\n        return [n.data.act for n in self.path_to_node(node)]\n\n    def node_score(self, node: Node) -> float:\n        pnode = self.tree.parent(node.identifier)\n\n        data: NodeData = node.data\n        pdata: NodeData = pnode.data if pnode is not None else data\n        k = 1.4\n        return (data.total_reward/(data.cnt_visit+1)) + k * math.sqrt(math.log2(pdata.cnt_visit+2)/(data.cnt_visit+1))\n')),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-py"},'# main.py\nfrom time import sleep\nfrom typing import Iterable\n\nimport gym\nfrom gym.core import ActType\n\nfrom algo import MCTS\n\nenv = gym.make("CartPole-v1")\n\ndef value_func(actions: Iterable[ActType], delay=.0) -> float:\n    total_reward = 0\n    env.reset(seed=1)\n    for action in actions:\n        observation, reward, terminated, truncated, info = env.step(action)\n        total_reward += reward\n        # print(f"action={action}, observation={observation}, reward={reward}")\n        if terminated or truncated:\n            observation, info = env.reset()\n            break\n        sleep(delay)\n    if total_reward<20: return 0\n    return total_reward\n\nmcts = MCTS(value_func, [0,1])\nbest = mcts.run(1000)\n\nenv = gym.make("CartPole-v1", render_mode="human")\nenv.reset(seed=1)\nwhile True:\n    value_func(best, 0.025)\n    sleep(1)\n')))}c.isMDXComponent=!0},86890:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/Wn5pbkJ6mo4VZrx315qcyjzKn0S-d4b76e411ed2df7e6cdd6ba6278fda8c.png"}}]);